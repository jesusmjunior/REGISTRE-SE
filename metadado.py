import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
from datetime import datetime
import re
import io
import unicodedata
import csv

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise Semana Registre-se",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo principal
st.title("üìù An√°lise de Dados da Semana Registre-se")
st.markdown("### Decoupagem L√≥gica e Classifica√ß√£o Sem√¢ntica")

# Estrutura sem√¢ntica conforme especificado
ESTRUTURA_SEMANTICA = {
    'Carimbo de data/hora': {'classe': 'Metadado', 'atributo': 'Timestamp', 'tipo': 'datetime'},
    'Endere√ßo de e-mail': {'classe': 'Contato', 'atributo': 'Email Principal', 'tipo': 'string'},
    'Identifica√ß√£o da Serventia Extrajudicial': {'classe': 'Identifica√ß√£o', 'atributo': 'Nome/ID da Serventia', 'tipo': 'string'},
    'E-mail': {'classe': 'Contato', 'atributo': 'Email Secund√°rio', 'tipo': 'string'},
    'Whatsapp': {'classe': 'Contato', 'atributo': 'Canal Instant√¢neo', 'tipo': 'string'},
    'Foram realizadas a√ß√µes na Semana "Registre-se" em maio de 2024?': {'classe': 'Participa√ß√£o', 'atributo': 'Resposta Sim/N√£o', 'tipo': 'categ√≥rica'},
    'Em caso de resposta N√ÉO ao quesito anterior, qual o motivo da n√£o participa√ß√£o na Semana Registre-se?': {'classe': 'Justificativa', 'atributo': 'Texto Livre', 'tipo': 'string (texto)'},
    'Quais as a√ß√µes realizadas na Semana Registre-se? Identifique-as por dia, se poss√≠vel.': {'classe': 'A√ß√µes', 'atributo': 'Descri√ß√£o das A√ß√µes', 'tipo': 'string (texto)'},
    'Marque as op√ß√µes dos p√∫blicos atendidos:': {'classe': 'P√∫blico-Alvo', 'atributo': 'Lista de Grupos Atendidos', 'tipo': 'multissele√ß√£o'},
    'Quantas 2¬™s vias foram emitidas?': {'classe': 'Indicadores Quantitativos', 'atributo': 'Segunda Via Emitida', 'tipo': 'inteiro'},
    'Quantos registros de nascimento foram feitos?': {'classe': 'Indicadores Quantitativos', 'atributo': 'Registro de Nascimento', 'tipo': 'inteiro'},
    'Quantas averba√ß√µes de paternidade foram feitas?': {'classe': 'Indicadores Quantitativos', 'atributo': 'Averba√ß√µes de Paternidade', 'tipo': 'inteiro'},
    'Quantas retifica√ß√µes de registro de nascimento foram iniciadas ou processadas?': {'classe': 'Indicadores Quantitativos', 'atributo': 'Retifica√ß√µes de Registro', 'tipo': 'inteiro'},
    'Quantos registros tardios de nascimento foram iniciados ou processados?': {'classe': 'Indicadores Quantitativos', 'atributo': 'Registros Tardios', 'tipo': 'inteiro'},
    'Quantas restaura√ß√µes de registro de nascimento foram iniciados ou processados?': {'classe': 'Indicadores Quantitativos', 'atributo': 'Restaura√ß√µes de Registro', 'tipo': 'inteiro'},
    'Classifica√ß√£o': {'classe': 'Classifica√ß√£o Administrativa', 'atributo': 'Categoria da Serventia', 'tipo': 'categ√≥rica'},
    'Tags': {'classe': 'Sem√¢ntica Expandida', 'atributo': 'Etiquetas Tem√°ticas', 'tipo': 'multir√≥tulo'}
}

# Renomea√ß√£o de colunas para facilitar o uso
MAPEAMENTO_COLUNAS = {
    'Carimbo de data/hora': 'data_hora',
    'Endere√ßo de e-mail': 'email',
    'Identifica√ß√£o da Serventia Extrajudicial': 'serventia',
    'E-mail': 'email_contato',
    'Whatsapp': 'whatsapp',
    'Foram realizadas a√ß√µes na Semana "Registre-se" em maio de 2024?': 'participou',
    'Em caso de resposta N√ÉO ao quesito anterior, qual o motivo da n√£o participa√ß√£o na Semana Registre-se?': 'motivo_nao_participacao',
    'Quais as a√ß√µes realizadas na Semana Registre-se? Identifique-as por dia, se poss√≠vel.': 'acoes_realizadas',
    'Marque as op√ß√µes dos p√∫blicos atendidos:': 'publicos_atendidos',
    'Quantas 2¬™s vias foram emitidas?': 'qtd_segundas_vias',
    'Quantos registros de nascimento foram feitos?': 'qtd_registros_nascimento',
    'Quantas averba√ß√µes de paternidade foram feitas?': 'qtd_averbacoes_paternidade',
    'Quantas retifica√ß√µes de registro de nascimento foram iniciadas ou processadas?': 'qtd_retificacoes',
    'Quantos registros tardios de nascimento foram iniciados ou processados?': 'qtd_registros_tardios',
    'Quantas restaura√ß√µes de registro de nascimento foram iniciados ou processados?': 'qtd_restauracoes',
    'Classifica√ß√£o': 'classificacao',
    'Tags': 'tags'
}

# Fun√ß√£o para normalizar texto removendo acentos e caracteres especiais
def normalizar_texto(texto):
    """
    Normaliza o texto removendo acentos e caracteres especiais
    """
    if isinstance(texto, str):
        # Substituir alguns caracteres problem√°ticos comuns
        texto = texto.replace('√ß', 'c').replace('√£', 'a').replace('√µ', 'o')
        texto = texto.replace('√°', 'a').replace('√©', 'e').replace('√≠', 'i').replace('√≥', 'o').replace('√∫', 'u')
        texto = texto.replace('√¢', 'a').replace('√™', 'e').replace('√Æ', 'i').replace('√¥', 'o').replace('√ª', 'u')
        texto = texto.replace('√§', 'a').replace('√´', 'e').replace('√Ø', 'i').replace('√∂', 'o').replace('√º', 'u')
        texto = texto.replace('√†', 'a').replace('√®', 'e').replace('√¨', 'i').replace('√≤', 'o').replace('√π', 'u')
        texto = texto.replace('¬∫', '').replace('¬™', '')
        
        # Normaliza√ß√£o avan√ßada usando unicodedata
        texto = unicodedata.normalize('NFKD', texto).encode('ASCII', 'ignore').decode('ASCII')
        
        return texto
    return texto

# Fun√ß√£o para mapear cabe√ßalhos entre diferentes formatos
def mapear_cabecalhos(cabecalhos_originais):
    """
    Mapeia cabe√ßalhos com caracteres especiais para os cabe√ßalhos esperados
    """
    # Dicion√°rio de mapeamento de cabe√ßalhos normalizados para cabe√ßalhos esperados
    mapeamento_aproximado = {
        'carimbo de data/hora': 'Carimbo de data/hora',
        'endereco de e-mail': 'Endere√ßo de e-mail',
        'identificacao da serventia extrajudicial': 'Identifica√ß√£o da Serventia Extrajudicial',
        'e-mail': 'E-mail',
        'whatsapp': 'Whatsapp',
        'foram realizadas acoes na semana "registre-se" em maio de 2024?': 'Foram realizadas a√ß√µes na Semana "Registre-se" em maio de 2024?',
        'em caso de resposta nao ao quesito anterior, qual o motivo da nao participacao na semana registre-se?': 'Em caso de resposta N√ÉO ao quesito anterior, qual o motivo da n√£o participa√ß√£o na Semana Registre-se?',
        'quais as acoes realizadas na semana registre-se? identifique-as por dia, se possivel.': 'Quais as a√ß√µes realizadas na Semana Registre-se? Identifique-as por dia, se poss√≠vel.',
        'marque as opcoes dos publicos atendidos:': 'Marque as op√ß√µes dos p√∫blicos atendidos:',
        'quantas 2as vias foram emitidas?': 'Quantas 2¬™s vias foram emitidas?',
        'quantos registros de nascimento foram feitos?': 'Quantos registros de nascimento foram feitos?',
        'quantas averbaoes de paternidade foram feitas?': 'Quantas averba√ß√µes de paternidade foram feitas?',
        'quantas retificacoes de registro de nascimento foram iniciadas ou processadas?': 'Quantas retifica√ß√µes de registro de nascimento foram iniciadas ou processadas?',
        'quantos registros tardios de nascimento foram iniciados ou processados?': 'Quantos registros tardios de nascimento foram iniciados ou processados?',
        'quantas restauracoes de registro de nascimento foram iniciados ou processados?': 'Quantas restaura√ß√µes de registro de nascimento foram iniciados ou processados?',
        'classificacao': 'Classifica√ß√£o',
        'tags': 'Tags'
    }
    
    # Normalizando e mapeando os cabe√ßalhos
    cabecalhos_mapeados = []
    for cabecalho in cabecalhos_originais:
        cabecalho_normalizado = normalizar_texto(cabecalho).lower()
        
        # Buscando o cabe√ßalho mais pr√≥ximo
        for chave, valor in mapeamento_aproximado.items():
            if chave in cabecalho_normalizado or cabecalho_normalizado in chave:
                cabecalhos_mapeados.append(valor)
                break
        else:
            # Se n√£o encontrar, mant√©m o original
            cabecalhos_mapeados.append(cabecalho)
    
    return cabecalhos_mapeados

# Fun√ß√£o para carregar e limpar dados do TXT
@st.cache_data
def carregar_dados_txt(arquivo):
    """
    Carrega e limpa os dados do arquivo TXT com dados tabulados
    """
    try:
        # Lendo o conte√∫do do arquivo
        conteudo = arquivo.read().decode('utf-8', errors='replace')
        
        # Separando as linhas
        linhas = conteudo.split('\n')
        
        # Obtendo cabe√ßalhos (primeira linha)
        cabecalhos_originais = linhas[0].split('\t')
        
        # Mapeando cabe√ßalhos para formatos corretos
        cabecalhos_mapeados = mapear_cabecalhos(cabecalhos_originais)
        
        # Criando lista para armazenar os dados
        dados = []
        
        # Processando todas as linhas, exceto a primeira (cabe√ßalho)
        for linha in linhas[1:]:
            if linha.strip():  # Pulando linhas vazias
                valores = linha.split('\t')
                
                # Garantindo que tenha o mesmo n√∫mero de colunas que o cabe√ßalho
                while len(valores) < len(cabecalhos_mapeados):
                    valores.append("")
                
                # Limitando ao n√∫mero de colunas do cabe√ßalho
                valores = valores[:len(cabecalhos_mapeados)]
                
                # Adicionando √† lista de dados
                dados.append(dict(zip(cabecalhos_mapeados, valores)))
        
        # Criando DataFrame
        df = pd.DataFrame(dados)
        
        # Verificando quais colunas existem no DataFrame
        colunas_existentes = [col for col in MAPEAMENTO_COLUNAS.keys() if col in df.columns]
        mapeamento_filtrado = {col: MAPEAMENTO_COLUNAS[col] for col in colunas_existentes}
        
        # Renomeando apenas as colunas que existem
        if mapeamento_filtrado:
            df = df.rename(columns=mapeamento_filtrado)
        
        # Convers√£o de tipos de dados
        # Convertendo colunas num√©ricas
        colunas_numericas = [
            'qtd_segundas_vias', 'qtd_registros_nascimento', 
            'qtd_averbacoes_paternidade', 'qtd_retificacoes', 
            'qtd_registros_tardios', 'qtd_restauracoes'
        ]
        
        for coluna in colunas_numericas:
            if coluna in df.columns:
                # Extraindo valores num√©ricos das strings
                df[coluna] = df[coluna].apply(lambda x: re.sub(r'[^\d]', '', str(x)) if str(x).strip() else '0')
                # Convertendo para n√∫meros
                df[coluna] = pd.to_numeric(df[coluna], errors='coerce').fillna(0).astype(int)
        
        # Convers√£o de data/hora
        if 'data_hora' in df.columns:
            df['data_hora'] = pd.to_datetime(df['data_hora'], errors='coerce')
        
        # Criando campo de status de participa√ß√£o mais claro
        if 'participou' in df.columns:
            df['status_participacao'] = df['participou'].apply(
                lambda x: 'Participou' if str(x).upper() == 'SIM' else 'N√£o Participou'
            )
            
        return df
        
    except Exception as e:
        st.error(f"Erro ao processar o arquivo: {e}")
        return None

# Fun√ß√£o para obter a estrutura sem√¢ntica agrupada por classe
def obter_estrutura_por_classe():
    """
    Agrupa a estrutura sem√¢ntica por classe
    """
    classes_semanticas = {}
    for coluna_original, atributos in ESTRUTURA_SEMANTICA.items():
        classe = atributos['classe']
        if classe not in classes_semanticas:
            classes_semanticas[classe] = []
        
        classes_semanticas[classe].append({
            'coluna_original': coluna_original,
            'atributo': atributos['atributo'],
            'tipo': atributos['tipo']
        })
    
    return classes_semanticas

# Fun√ß√£o para analisar a distribui√ß√£o de participa√ß√£o
def analisar_participacao(df):
    """
    Analisa a distribui√ß√£o de participa√ß√£o
    """
    if 'status_participacao' in df.columns:
        return df['status_participacao'].value_counts()
    elif 'participou' in df.columns:
        return df['participou'].value_counts()
    else:
        return None

# Fun√ß√£o para analisar p√∫blicos atendidos
def analisar_publicos(df):
    """
    Analisa os p√∫blicos atendidos
    """
    if 'publicos_atendidos' not in df.columns:
        return None
    
    # Processando cada entrada de p√∫blicos
    publicos_contagem = {}
    
    # Processando cada entrada de p√∫blicos
    for publicos in df['publicos_atendidos'].dropna():
        # Dividindo m√∫ltiplas op√ß√µes se estiverem separadas por v√≠rgulas ou pontos
        opcoes = re.split(r'[,.]', str(publicos))
        
        for opcao in opcoes:
            opcao = opcao.strip()
            if opcao:
                publicos_contagem[opcao] = publicos_contagem.get(opcao, 0) + 1
    
    # Convertendo para DataFrame
    df_publicos = pd.DataFrame({
        'P√∫blico': list(publicos_contagem.keys()),
        'Contagem': list(publicos_contagem.values())
    }).sort_values(by='Contagem', ascending=False)
    
    return df_publicos

# Fun√ß√£o para analisar indicadores quantitativos
def analisar_indicadores(df):
    """
    Analisa os indicadores quantitativos
    """
    colunas_metricas = [col for col in df.columns if col.startswith('qtd_')]
    if not colunas_metricas:
        return None
    
    # Estat√≠sticas descritivas
    estatisticas = df[colunas_metricas].describe()
    
    # Somando totais
    totais = df[colunas_metricas].sum().to_frame('Total')
    
    # Contando participantes que reportaram valores > 0
    participantes = {}
    medias_ativas = {}
    
    for col in colunas_metricas:
        participantes[col] = (df[col] > 0).sum()
        
        # Calculando m√©dia apenas para serventias ativas
        ativos = df[df[col] > 0]
        if len(ativos) > 0:
            medias_ativas[col] = ativos[col].mean()
        else:
            medias_ativas[col] = 0
    
    return {
        'estatisticas': estatisticas,
        'totais': totais,
        'participantes': participantes,
        'medias_ativas': medias_ativas
    }

# Fun√ß√£o para analisar palavras-chave nas a√ß√µes
def analisar_palavras_chave(df):
    """
    Analisa palavras-chave presentes nas descri√ß√µes de a√ß√µes
    """
    if 'acoes_realizadas' not in df.columns:
        return None
    
    # Lista de stop words para remover
    stop_words = ['de', 'a', 'o', 'e', 'do', 'da', 'dos', 'das', 'para', 'com', 'em', 'no', 'na', 'por', 
                  'que', 'se', 'foi', 'como', 'uma', 'um', 'ou']
    
    # Processando cada entrada de a√ß√µes
    palavras_chave = []
    
    for acoes in df['acoes_realizadas'].dropna():
        # Convertendo para string e transformando para min√∫sculas
        texto = str(acoes).lower()
        
        # Removendo caracteres especiais e dividindo em palavras
        palavras = re.findall(r'\b[a-zA-Z0-9√°√©√≠√≥√∫√†√¢√™√¥√£√µ√ß]+\b', texto)
        
        # Filtrando palavras com mais de 3 letras e removendo stop words
        palavras = [p for p in palavras if len(p) > 3 and p not in stop_words]
        
        palavras_chave.extend(palavras)
    
    # Contando frequ√™ncia das palavras-chave
    contador_palavras = {}
    for palavra in palavras_chave:
        contador_palavras[palavra] = contador_palavras.get(palavra, 0) + 1
    
    # Convertendo para DataFrame
    df_palavras = pd.DataFrame({
        'Palavra': list(contador_palavras.keys()),
        'Frequ√™ncia': list(contador_palavras.values())
    }).sort_values(by='Frequ√™ncia', ascending=False)
    
    return df_palavras

# Barra lateral
st.sidebar.title("Controles")

# Upload de arquivo
arquivo_uploaded = st.sidebar.file_uploader("Fa√ßa upload do arquivo", type=["txt", "csv", "xlsx", "xls"])

# Informa√ß√£o sobre formatos suportados
st.sidebar.info("Formatos suportados: .txt, .csv, .xlsx, .xls")

# Bot√£o para carregar dados de exemplo
if st.sidebar.button("Usar Dados de Exemplo"):
    # Criando um arquivo de exemplo com os dados fornecidos
    with open('dados_exemplo.txt', 'w', encoding='utf-8') as f:
        f.write('''Carimbo de data/hora\tEndere√ßo de e-mail\tIdentifica√ß√£o da Serventia Extrajudicial\tE-mail\tWhatsapp\tForam realizadas a√ß√µes na Semana "Registre-se" em maio de 2024?\tEm caso de resposta N√ÉO ao quesito anterior, qual o motivo da n√£o participa√ß√£o na Semana Registre-se?\tQuais as a√ß√µes realizadas na Semana Registre-se? Identifique-as por dia, se poss√≠vel.\tMarque as op√ß√µes dos p√∫blicos atendidos:\tQuantas 2¬™s vias foram emitidas?\tQuantos registros de nascimento foram feitos?\tQuantas averba√ß√µes de paternidade foram feitas?\tQuantas retifica√ß√µes de registro de nascimento foram iniciadas ou processadas?\tQuantos registros tardios de nascimento foram iniciados ou processados?\tQuantas restaura√ß√µes de registro de nascimento foram iniciados ou processados?\tClassifica√ß√£o\tTags
########\tN√£o Informado\t156919\tcartoriovilanova@gmail.com\t1,00E+11\tN√£o\tESTAMOS CADASTRADOS NAO HOUVE SOLICITA√á√ïES\tDIVULGA√á√ÉO VIA REDES SOCIAIS E BALCAO\tPopula√ß√£o em geral\tNAO TEVE PEDIDOS\tNAO TEVE REGISTROS\tSEM PROCURA\tSEM PROCURA\t0\t0\tN√£o Participou\tMotivo da n√£o participa√ß√£o
########\tN√£o Informado\tServentia Extrajudicial do Of√≠cio √önico de S√£o F√©lix de Balsas-MA\tcartoriosaofelixdebalsas@gmail.com\t99 98429-8916\tN√£o\tN√£o recebemos nenhum pedido\tDivulga√ß√£o pelo whatzapp e cartaz\tPopula√ß√£o em geral\t0\t0\t0\t0\t0\t0\tN√£o Participou\tMotivo da n√£o participa√ß√£o
########\tN√£o Informado\tSERVENTIA EXTRAJUDICIAL DO OF√çCIO √öNICO DE S√£o Jo√£o do Soter -MA\tcartoriosaojoaosoter@gmail.com\t99 98546-3051\tSim\tN√£o Informado\tanuncio em carro de som nos primeiros 3 dias da semana, banner de divulga√ß√£o exposto no cart√≥rio e convite verbal as Popula√ß√£o em geral.\tPovos quilombolas, Popula√ß√£o em geral\tn√£o houve demanda\tn√£o houve demanda\tn√£o houve demanda\tn√£o houve demanda\tn√£o houve demanda\t0\tParticipou\tA√ß√µes realizadas
########\tN√£o Informado\t5 TABELIONATO DE NOTAS DE S√ÉO LUIS\tjuliana@5oficiosaoluis.com.br\t9,90E+10\tN√£o\tN√£o temos atribui√ß√£o de Registro Civil.\tN√£o temos atribui√ß√£o de registro civil.\tOutros:\t0\t0\t0\t0\t0\t0\tN√£o Participou\tMotivo da n√£o participa√ß√£o
########\tcartoriodeurbanosantos@hotmail.com\tServentia Extrajudicial de Urbano Santos\tN√£o Informado\tN√£o Informado\tSim\tN√£o Informado\tno dia 15/05 - 2¬™ vias de certid√£o\tPopula√ß√£o em geral\t3 via CRC\t3\t0\t0\t0\t0\tParticipou\tA√ß√µes realizadas
########\tafonsocunhacartorio@gmail.com\tServentia Extrajudicial de Afonso Cunha\tN√£o Informado\t98 97012-0156\tN√£o\tem 15/04 n√£o houve solicita√ß√µes\tem 15/04 n√£o houve solicita√ß√µes junto ao cart√≥rio nem no crc e nem no balc√£o\tPopula√ß√£o em geral\t0\t0\t0\t0\t0\t0\tN√£o Participou\tMotivo da n√£o participa√ß√£o
########\tklevianunes@gmail.com\tServentia Extrajudicial do Of√≠cio √önico de Centro do Guilherme MA\tcartoriocentrodoguilherme@hotmail.com\t1,00E+11\tSim\tN√£o Informado\tSolicita√ß√£o de certid√£o para outros cartorios\tPopula√ß√£o em geral\t2\t2\tHoje n√£o teve av de paternidade\tHoje n√£o teve retifica√ß√£o\tHoje n√£o teve registro tardio\tHoje n√£o teve restaura√ß√£o\tParticipou\tA√ß√µes realizadas
########\tcartoriodemataroma@hotmail.com\tCart√≥rio Extrajudicial Of√≠cio √önico de Mata Roma\tcartoriodemataroma@hotmail.com\t9,90E+10\tSim\tN√£o Informado\tEmiss√£o de certid√µes e registros\tPopula√ß√£o em geral\t4\t0\t0\t1\t0\t0\tParticipou\tA√ß√µes realizadas
########\tcart.sambaiba@hotmail.com\tServentia Extrajudicial de Samba√≠ba/MA\tcart.sambaiba@hotmail.com\t1,00E+11\tSim\tN√£o Informado\tEMISS√ÉO DE 2¬∫ VIA DE CERTID√ÉO DE NASCIMENTO E CASAMENTO, BEM COMO REGISTROS DE NASCIMENTOS E RECONHECIMENTO DE PATERNIDADE.\tOutros:\t18\t4\t1\t2\t0\t0\tParticipou\tA√ß√µes realizadas
########\tvitor_sardinha@hotmail.clm\t2o of√≠cio Extrajudicial de Presidente Dutra\tVitor_sardinha@hotmail.com\t1,00E+11\tSim\tN√£o Informado\tEmiss√£o de 2as vias gratuitas\tPessoas em situa√ß√£o de rua, Popula√ß√£o em geral\t6\t5\t0\t0\t0\t0\tParticipou\tA√ß√µes realizadas''')
    
    # Abrindo o arquivo de exemplo
    arquivo_exemplo = open('dados_exemplo.txt', 'rb')
    
    # Processando o arquivo de exemplo
    df = carregar_dados_txt(arquivo_exemplo)
    
    # Exibindo mensagem de sucesso
    st.sidebar.success("Dados de exemplo carregados com sucesso!")
else:
    # Verifica√ß√£o se o arquivo foi carregado
    if arquivo_uploaded is not None:
        # Carregando e limpando os dados do arquivo fornecido
        extensao = arquivo_uploaded.name.split('.')[-1].lower()
        if extensao == 'txt':
            df = carregar_dados_txt(arquivo_uploaded)
        else:
            # Para outros formatos, tentamos usar o pandas normalmente
            try:
                if extensao == 'csv':
                    df = pd.read_csv(arquivo_uploaded)
                else:  # xlsx ou xls
                    df = pd.read_excel(arquivo_uploaded)
                
                # Aplicando o mesmo processamento do TXT
                for coluna in ['qtd_segundas_vias', 'qtd_registros_nascimento', 'qtd_averbacoes_paternidade', 
                              'qtd_retificacoes', 'qtd_registros_tardios', 'qtd_restauracoes']:
                    if coluna in df.columns:
                        df[coluna] = pd.to_numeric(df[coluna], errors='coerce').fillna(0).astype(int)
                
                if 'participou' in df.columns:
                    df['status_participacao'] = df['participou'].apply(
                        lambda x: 'Participou' if str(x).upper() == 'SIM' else 'N√£o Participou'
                    )
            except Exception as e:
                st.error(f"Erro ao processar o arquivo: {e}")
                st.info("Tente salvar o arquivo como TXT ou CSV e carregue novamente.")
                df = None
    else:
        df = None

# Verifica√ß√£o se os dados foram carregados
if df is not None:
    st.sidebar.success(f"Arquivo carregado com sucesso! Total de registros: {len(df)}")
    
    # Menu de navega√ß√£o
    pagina = st.sidebar.radio(
        "Navegue pelas se√ß√µes:",
        ["üìä Vis√£o Geral", 
         "üîç Decoupagem L√≥gica",
         "üìã An√°lise de Participa√ß√£o", 
         "üìà Indicadores Quantitativos",
         "üë• P√∫blicos Atendidos",
         "üî† An√°lise Textual"]
    )
    
    # Vis√£o Geral
    if pagina == "üìä Vis√£o Geral":
        st.header("üìä Vis√£o Geral dos Dados")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("Total de Registros", len(df))
            
            participacao = analisar_participacao(df)
            if participacao is not None:
                st.metric("Serventias Participantes", 
                          participacao.get('Participou', 0) if 'Participou' in participacao else 
                          participacao.get('SIM', 0) if 'SIM' in participacao else 0)
        
        with col2:
            indicadores = analisar_indicadores(df)
            if indicadores is not None:
                total_servicos = indicadores['totais']['Total'].sum()
                st.metric("Total de Servi√ßos Realizados", f"{total_servicos:,}".replace(",", "."))
                
                # Maior indicador
                maior_indicador = indicadores['totais'].idxmax()[0]
                maior_valor = indicadores['totais'].max()[0]
                
                nome_formatado = maior_indicador.replace('qtd_', '').replace('_', ' ').title()
                st.metric("Servi√ßo Mais Realizado", f"{nome_formatado}: {maior_valor:,}".replace(",", "."))
        
        # Gr√°fico de totais por servi√ßo
        if indicadores is not None:
            st.subheader("Distribui√ß√£o de Servi√ßos")
            
            # Preparando os dados para o gr√°fico
            df_chart = indicadores['totais'].reset_index()
            df_chart.columns = ['Servi√ßo', 'Total']
            
            # Renomeando servi√ßos para exibi√ß√£o
            df_chart['Servi√ßo'] = df_chart['Servi√ßo'].apply(
                lambda x: x.replace('qtd_', '').replace('_', ' ').title()
            )
            
            # Criando gr√°fico de barras horizontais usando Altair
            chart = alt.Chart(df_chart).mark_bar().encode(
                x='Total:Q',
                y=alt.Y('Servi√ßo:N', sort='-x'),
                tooltip=['Servi√ßo', 'Total']
            ).properties(
                height=300
            ).interactive()
            
            st.altair_chart(chart, use_container_width=True)
        
        # Vis√£o r√°pida dos dados
        with st.expander("Visualizar amostra dos dados"):
            st.dataframe(df.head(10))
    
    # Decoupagem L√≥gica
    elif pagina == "üîç Decoupagem L√≥gica":
        st.header("üîç Decoupagem L√≥gica e Classifica√ß√£o Sem√¢ntica")
        
        st.markdown("""
        A tabela abaixo mostra a estrutura sem√¢ntica aplicada aos dados da Semana Registre-se, 
        organizando as colunas em classes sem√¢nticas com seus respectivos atributos e tipos de dados.
        """)
        
        # Obter estrutura sem√¢ntica
        classes_semanticas = obter_estrutura_por_classe()
        
        # Criar abas para cada classe sem√¢ntica
        tabs = st.tabs([classe for classe in classes_semanticas.keys()])
        
        for i, (classe, tab) in enumerate(zip(classes_semanticas.keys(), tabs)):
            with tab:
                st.subheader(f"Classe: {classe}")
                
                # Criando DataFrame para exibir a estrutura
                df_estrutura = pd.DataFrame(classes_semanticas[classe])
                
                # Adicionando coluna de exist√™ncia nos dados
                df_estrutura['Presente nos Dados'] = df_estrutura['coluna_original'].apply(
                    lambda x: "‚úÖ Sim" if x in df.columns or MAPEAMENTO_COLUNAS.get(x) in df.columns else "‚ùå N√£o"
                )
                
                # Renomeando colunas para exibi√ß√£o
                df_estrutura = df_estrutura.rename(columns={
                    'coluna_original': 'Coluna Original',
                    'atributo': 'Atributo',
                    'tipo': 'Tipo de Dado'
                })
                
                st.dataframe(df_estrutura[['Coluna Original', 'Atributo', 'Tipo de Dado', 'Presente nos Dados']], 
                            use_container_width=True)
        
        # Mostrar mapeamento de colunas renomeadas
        with st.expander("Ver mapeamento de colunas renomeadas"):
            st.subheader("Mapeamento de Colunas")
            
            mapeamento_df = pd.DataFrame([
                {"Coluna Original": col_orig, "Coluna Renomeada": col_nova}
                for col_orig, col_nova in MAPEAMENTO_COLUNAS.items()
                if col_orig in df.columns
            ])
            
            st.dataframe(mapeamento_df, use_container_width=True)
    
    # An√°lise de Participa√ß√£o
    elif pagina == "üìã An√°lise de Participa√ß√£o":
        st.header("üìã An√°lise de Participa√ß√£o")
        
        participacao = analisar_participacao(df)
        
        if participacao is not None:
            # M√©tricas
            col1, col2, col3 = st.columns(3)
            
            total = participacao.sum()
            
            # Identificando valores de participa√ß√£o
            sim_key = 'Participou' if 'Participou' in participacao else 'SIM' if 'SIM' in participacao else None
            nao_key = 'N√£o Participou' if 'N√£o Participou' in participacao else 'N√ÉO' if 'N√ÉO' in participacao else None
            
            participaram = participacao.get(sim_key, 0) if sim_key else 0
            nao_participaram = participacao.get(nao_key, 0) if nao_key else 0
            
            with col1:
                st.metric("Total de Respostas", total)
            
            with col2:
                st.metric("Participaram", participaram)
                porcentagem_sim = (participaram / total * 100) if total > 0 else 0
                st.caption(f"{porcentagem_sim:.1f}% do total")
            
            with col3:
                st.metric("N√£o Participaram", nao_participaram)
                porcentagem_nao = (nao_participaram / total * 100) if total > 0 else 0
                st.caption(f"{porcentagem_nao:.1f}% do total")
            
            # Gr√°fico de participa√ß√£o
            st.subheader("Distribui√ß√£o de Participa√ß√£o")
            
            df_chart = pd.DataFrame({
                'Status': participacao.index,
                'Quantidade': participacao.values
            })
            
            chart = alt.Chart(df_chart).mark_arc().encode(
                theta=alt.Theta(field="Quantidade", type="quantitative"),
                color=alt.Color(field="Status", type="nominal", 
                               scale=alt.Scale(
                                   domain=[sim_key, nao_key] if sim_key and nao_key else None,
                                   range=['#2ecc71', '#e74c3c'] if sim_key and nao_key else None
                               )),
                tooltip=['Status', 'Quantidade']
            ).properties(
                width=400,
                height=400
            )
            
            st.altair_chart(chart, use_container_width=True)
            
            # An√°lise de motivos de n√£o participa√ß√£o
            if 'motivo_nao_participacao' in df.columns:
                st.subheader("Motivos para N√£o Participa√ß√£o")
                
                # Filtrando apenas serventias que n√£o participaram
                nao_participaram_df = df[df['status_participacao'] == 'N√£o Participou'] if 'status_participacao' in df.columns else \
                                      df[df['participou'].str.upper() == 'N√ÉO'] if 'participou' in df.columns else pd.DataFrame()
                
                if not nao_participaram_df.empty:
                    motivos = nao_participaram_df['motivo_nao_participacao'].value_counts()
                    
                    if not motivos.empty:
                        df_motivos = pd.DataFrame({
                            'Motivo': motivos.index,
                            'Quantidade': motivos.values
                        })
                        
                        # Limitando a 10 motivos mais comuns
                        if len(df_motivos) > 10:
                            df_motivos = df_motivos.head(10)
                            st.caption("Mostrando os 10 motivos mais comuns")
                        
                        chart = alt.Chart(df_motivos).mark_bar().encode(
                            x='Quantidade:Q',
                            y=alt.Y('Motivo:N', sort='-x'),
                            tooltip=['Motivo', 'Quantidade']
                        ).properties(
                            height=30 * len(df_motivos)  # Altura din√¢mica baseada no n√∫mero de motivos
                        )
                        
                        st.altair_chart(chart, use_container_width=True)
                    else:
                        st.info("Nenhum motivo registrado para n√£o participa√ß√£o.")
                else:
                    st.info("N√£o foram encontrados registros de serventias que n√£o participaram.")
        else:
            st.warning("N√£o foi poss√≠vel analisar a participa√ß√£o. Verifique se a coluna de participa√ß√£o existe nos dados.")
    
    # Indicadores Quantitativos
    elif pagina == "üìà Indicadores Quantitativos":
        st.header("üìà Indicadores Quantitativos")
        
        indicadores = analisar_indicadores(df)
        
        if indicadores is not None:
            # M√©tricas principais
            total_servicos = indicadores['totais']['Total'].sum()
            
            st.metric("Total de Servi√ßos Realizados", f"{total_servicos:,}".replace(",", "."))
            
            # Tabela de indicadores
            st.subheader("Resumo dos Indicadores")
            
            # Criando DataFrame para exibi√ß√£o
            dados_tabela = []
            
            for col in indicadores['totais'].index:
                nome_formatado = col.replace('qtd_', '').replace('_', ' ').title()
                total = int(indicadores['totais'].loc[col, 'Total'])
                participantes = indicadores['participantes'][col]
                media_geral = indicadores['estatisticas'].loc['mean', col]
                media_ativa = indicadores['medias_ativas'][col]
                maximo = int(indicadores['estatisticas'].loc['max', col])
                
                percentual = (total / total_servicos * 100) if total_servicos > 0 else 0
                
                dados_tabela.append({
                    'Servi√ßo': nome_formatado,
                    'Total': total,
                    'Percentual': f"{percentual:.1f}%",
                    'Serventias Ativas': participantes,
                    'M√©dia p/ Ativa': f"{media_ativa:.1f}",
                    'M√°ximo': maximo
                })
            
            df_tabela = pd.DataFrame(dados_tabela)
            st.dataframe(df_tabela, use_container_width=True)
            
            # Gr√°fico de totais por servi√ßo
            st.subheader("Distribui√ß√£o dos Servi√ßos")
            
            # Preparando os dados para o gr√°fico
            df_chart = indicadores['totais'].reset_index()
            df_chart.columns = ['Servi√ßo', 'Total']
            
            # Renomeando servi√ßos para exibi√ß√£o
            df_chart['Servi√ßo'] = df_chart['Servi√ßo'].apply(
                lambda x: x.replace('qtd_', '').replace('_', ' ').title()
            )
            
            # Calculando percentual
            df_chart['Percentual'] = df_chart['Total'] / df_chart['Total'].sum() * 100
            df_chart['R√≥tulo'] = df_chart.apply(
                lambda x: f"{x['Servi√ßo']}: {x['Total']:,} ({x['Percentual']:.1f}%)".replace(",", "."), 
                axis=1
            )
            
            # Criando gr√°fico de pizza usando Altair
            chart = alt.Chart(df_chart).mark_arc().encode(
                theta=alt.Theta(field="Total", type="quantitative"),
                color=alt.Color(field="Servi√ßo", type="nominal", 
                               scale=alt.Scale(scheme='category10')),
                tooltip=['Servi√ßo', 'Total', 'Percentual:Q']
            ).properties(
                width=500,
                height=500
            )
            
            st.altair_chart(chart, use_container_width=True)
            
            # Histograma de distribui√ß√£o para cada indicador
            st.subheader("Distribui√ß√£o de Valores por Servi√ßo")
            
            # Sele√ß√£o do indicador
            colunas_metricas = [col for col in df.columns if col.startswith('qtd_')]
            opcoes_indicadores = {col.replace('qtd_', '').replace('_', ' ').title(): col for col in colunas_metricas}
            
            indicador_selecionado = st.selectbox(
                "Selecione o servi√ßo para visualizar a distribui√ß√£o:",
                list(opcoes_indicadores.keys())
            )
            
            coluna_indicador = opcoes_indicadores[indicador_selecionado]
            
            # Filtrando apenas valores > 0
            df_filtered = df[df[coluna_indicador] > 0]
            
            if not df_filtered.empty:
                # Criando histograma
                hist = alt.Chart(df_filtered).mark_bar().encode(
                    alt.X(f'{coluna_indicador}:Q', bin=True, title=indicador_selecionado),
                    y='count()',
                    tooltip=['count()']
                ).properties(
                    width=600,
                    height=400
                )
                
                st.altair_chart(hist, use_container_width=True)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.metric(f"Total de {indicador_selecionado}", 
                             df[coluna_indicador].sum())
                
                with col2:
                    st.metric(f"Serventias com {indicador_selecionado} > 0", 
                             len(df_filtered))
            else:
                st.info(f"N√£o h√° registros com valores de {indicador_selecionado} maiores que zero.")
        else:
            st.warning("N√£o foi poss√≠vel analisar os indicadores quantitativos. Verifique se as colunas existem nos dados.")
    
    # P√∫blicos Atendidos
    elif pagina == "üë• P√∫blicos Atendidos":
        st.header("üë• An√°lise de P√∫blicos Atendidos")
        
        publicos = analisar_publicos(df)
        
        if publicos is not None and not publicos.empty:
            # M√©tricas
            st.metric("Total de P√∫blicos Identificados", len(publicos))
            
            # Top p√∫blicos
            st.subheader("P√∫blicos Mais Atendidos")
            
            # Limitando a 15 p√∫blicos mais comuns
            df_top = publicos.head(15)
            
            chart = alt.Chart(df_top).mark_bar().encode(
                x='Contagem:Q',
                y=alt.Y('P√∫blico:N', sort='-x'),
                tooltip=['P√∫blico', 'Contagem']
            ).properties(
                height=30 * len(df_top)  # Altura din√¢mica baseada no n√∫mero de p√∫blicos
            )
            
            st.altair_chart(chart, use_container_width=True)
            
            # Tabela completa
            with st.expander("Ver todos os p√∫blicos atendidos"):
                st.dataframe(publicos, use_container_width=True)
            
            # Distribui√ß√£o percentual
            st.subheader("Distribui√ß√£o Percentual dos P√∫blicos")
            
            # Top 10 para gr√°fico de pizza
            df_top10 = publicos.head(10).copy()
            total = df_top10['Contagem'].sum()
            df_top10['Percentual'] = df_top10['Contagem'] / total * 100
            
            chart = alt.Chart(df_top10).mark_arc().encode(
                theta=alt.Theta(field="Contagem", type="quantitative"),
                color=alt.Color(field="P√∫blico", type="nominal", scale=alt.Scale(scheme='category20')),
                tooltip=['P√∫blico', 'Contagem', 'Percentual:Q']
            ).properties(
                width=500,
                height=500
            )
            
            st.altair_chart(chart, use_container_width=True)
            st.caption("Top 10 p√∫blicos mais atendidos")
        else:
            st.warning("N√£o foi poss√≠vel analisar os p√∫blicos atendidos. Verifique se a coluna de p√∫blicos existe nos dados.")
    
    # An√°lise Textual
    elif pagina == "üî† An√°lise Textual":
        st.header("üî† An√°lise Textual das A√ß√µes Realizadas")
        
        palavras = analisar_palavras_chave(df)
        
        if palavras is not None and not palavras.empty:
            # M√©tricas
            st.metric("Total de Palavras-chave √önicas", len(palavras))
            
            # Top palavras
            st.subheader("Palavras-chave Mais Frequentes")
            
            # Limitando a 20 palavras mais comuns
            df_top = palavras.head(20)
            
            chart = alt.Chart(df_top).mark_bar().encode(
                x='Frequ√™ncia:Q',
                y=alt.Y('Palavra:N', sort='-x'),
                tooltip=['Palavra', 'Frequ√™ncia']
            ).properties(
                height=30 * len(df_top)  # Altura din√¢mica baseada no n√∫mero de palavras
            )
            
            st.altair_chart(chart, use_container_width=True)
            
            # Nuvem de palavras simulada
            st.subheader("Principais Termos nas A√ß√µes Realizadas")
            
            # Criando uma visualiza√ß√£o similar a uma nuvem de palavras usando tamanhos de texto
            col1, col2, col3 = st.columns(3)
            
            # Pegando as 15 principais palavras
            top_15_palavras = palavras.head(15)
            
            # Dividindo em 3 colunas
            for i, (_, row) in enumerate(top_15_palavras.iterrows()):
                # Determinando o tamanho do texto baseado na frequ√™ncia
                freq = row['Frequ√™ncia']
                max_freq = top_15_palavras['Frequ√™ncia'].max()
                min_freq = top_15_palavras['Frequ√™ncia'].min()
                
                # Normalizando para um tamanho entre 1 e 5
                size = 1 + (freq - min_freq) / (max_freq - min_freq) * 4
                font_size = 16 + size * 6  # Convertendo para pixels
                
                # Escolhendo a coluna
                col_idx = i % 3
                if col_idx == 0:
                    col1.markdown(f"<p style='font-size:{font_size}px; text-align:center;'>{row['Palavra']}</p>", unsafe_allow_html=True)
                elif col_idx == 1:
                    col2.markdown(f"<p style='font-size:{font_size}px; text-align:center;'>{row['Palavra']}</p>", unsafe_allow_html=True)
                else:
                    col3.markdown(f"<p style='font-size:{font_size}px; text-align:center;'>{row['Palavra']}</p>", unsafe_allow_html=True)
            
            # Tabela completa
            with st.expander("Ver todas as palavras-chave"):
                st.dataframe(palavras, use_container_width=True)
            
            # An√°lise de a√ß√µes por dia
            st.subheader("An√°lise das A√ß√µes por Dia da Semana")
            
            # Contagem de men√ß√µes a dias da semana
            dias_semana = ['segunda', 'ter√ßa', 'quarta', 'quinta', 'sexta', 's√°bado', 'domingo']
            mencoes_dias = {dia: 0 for dia in dias_semana}
            
            for acoes in df['acoes_realizadas'].dropna():
                texto = str(acoes).lower()
                for dia in dias_semana:
                    if dia in texto:
                        mencoes_dias[dia] += 1
            
            df_dias = pd.DataFrame({
                'Dia': list(mencoes_dias.keys()),
                'Men√ß√µes': list(mencoes_dias.values())
            })
            
            # Ordenando os dias da semana corretamente
            ordem_dias = {dia: i for i, dia in enumerate(dias_semana)}
            df_dias['ordem'] = df_dias['Dia'].map(ordem_dias)
            df_dias = df_dias.sort_values('ordem').drop('ordem', axis=1)
            
            chart = alt.Chart(df_dias).mark_bar().encode(
                x=alt.X('Dia:N', sort=None),  # Usando None para manter a ordem personalizada
                y='Men√ß√µes:Q',
                tooltip=['Dia', 'Men√ß√µes'],
                color=alt.condition(
                    alt.datum.Men√ß√µes == alt.expr.max('Men√ß√µes'),
                    alt.value('#2ecc71'),  # Verde para o dia mais mencionado
                    alt.value('#3498db')   # Azul para os outros dias
                )
            ).properties(
                width=600,
                height=400
            )
            
            st.altair_chart(chart, use_container_width=True)
        else:
            st.warning("N√£o foi poss√≠vel analisar as a√ß√µes realizadas. Verifique se a coluna de a√ß√µes existe nos dados.")
else:
    # Exibir p√°gina inicial quando nenhum arquivo foi carregado
    st.info("üëÜ Fa√ßa o upload de um arquivo (.txt, .csv, .xlsx, .xls) com os dados da Semana Registre-se para come√ßar a an√°lise ou clique em 'Usar Dados de Exemplo'.")
    
    st.markdown("""
    ### Sobre a Aplica√ß√£o
    
    Esta aplica√ß√£o realiza a decoupagem l√≥gica e classifica√ß√£o sem√¢ntica dos dados da Semana "Registre-se", 
    oferecendo visualiza√ß√µes e an√°lises detalhadas das seguintes dimens√µes:
    
    - **üìä Vis√£o Geral**: Resumo dos principais indicadores e m√©tricas
    - **üîç Decoupagem L√≥gica**: Estrutura sem√¢ntica das colunas e atributos
    - **üìã An√°lise de Participa√ß√£o**: Estat√≠sticas de participa√ß√£o das serventias
    - **üìà Indicadores Quantitativos**: An√°lise detalhada dos servi√ßos realizados
    - **üë• P√∫blicos Atendidos**: Distribui√ß√£o e categoriza√ß√£o dos p√∫blicos
    - **üî† An√°lise Textual**: Extra√ß√£o de insights das descri√ß√µes de a√ß√µes
    """)
    
    # Exibindo a estrutura sem√¢ntica
    with st.expander("Ver estrutura sem√¢ntica esperada"):
        st.subheader("Estrutura Sem√¢ntica dos Dados")
        
        # Obtendo estrutura por classe
        classes_semanticas = obter_estrutura_por_classe()
        
        # Criando DataFrame para exibi√ß√£o
        todas_colunas = []
        for classe, itens in classes_semanticas.items():
            for item in itens:
                todas_colunas.append({
                    'Classe': classe,
                    'Coluna Original': item['coluna_original'],
                    'Atributo': item['atributo'],
                    'Tipo de Dado': item['tipo']
                })
        
        df_estrutura = pd.DataFrame(todas_colunas)
        st.dataframe(df_estrutura, use_container_width=True)
        
    # Instru√ß√µes para formatos de arquivo
    st.markdown("""
    ### Instru√ß√µes para Importa√ß√£o de Arquivos
    
    A aplica√ß√£o foi adaptada para trabalhar com o formato de dados da Semana Registre-se, incluindo:
    
    1. **Arquivos TXT com dados tabulados** - O formato principal dos dados, separados por tabula√ß√£o
    2. **Normaliza√ß√£o de caracteres especiais** - Tratamento de acentos e caracteres especiais no texto
    3. **Compatibilidade de cabe√ßalhos** - Mapeamento autom√°tico entre diferentes formatos de cabe√ßalho
    
    Para come√ßar, basta carregar o arquivo ou usar os dados de exemplo.
    """)

# Rodap√©
st.sidebar.markdown("---")
st.sidebar.markdown("### Sobre")
st.sidebar.info(
    """
    Esta aplica√ß√£o foi desenvolvida para analisar os dados da Semana "Registre-se" 
    utilizando t√©cnicas de decoupagem l√≥gica e classifica√ß√£o sem√¢ntica.
    
    **Vers√£o:** 1.0
    """
)

# Informa√ß√µes adicionais sobre compatibilidade
st.sidebar.markdown("### Compatibilidade")
st.sidebar.info(
    """
    Esta aplica√ß√£o foi especialmente adaptada para 
    trabalhar com o formato TXT dos dados da Semana Registre-se.
    
    Tamb√©m suporta:
    - Arquivos TXT tabulados
    - CSV (.csv)
    - Excel (.xlsx, .xls) - requer bibliotecas adicionais
    """
)
